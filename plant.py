import os
import requests
import google.generativeai as genai

# === API KEYS ===
FDC_API_KEY = 'naE6pWAijzsfCTZdtNq7CbUfIzwkji9Bbx4pGBxk'
GEMINI_API_KEY = 'AIzaSyCse3Jfokz9bzIvZwBVIdeV1gE0-DPrifw'
FDC_SEARCH_URL = 'https://api.nal.usda.gov/fdc/v1/foods/search'

# === CONFIGURE GEMINI ===
genai.configure(api_key=GEMINI_API_KEY)


class RestartException(Exception):
    """Custom exception used to restart the CLI flow."""
    pass


def print_banner():
    """Displays the GrowPal CLI banner and instructions."""
    print("""
Welcome to GrowPal CLI
GrowPal helps you pick a grow setup, shows USDA nutrition info,
and gives AI meal ideas.

Hotkeys:
X = Exit | C = Clear Screen | R = Restart
""")


def get_input(prompt, options=None):
    """
    Get user input with optional menu selection.

    Args:
        prompt (str): The prompt to show the user.
        options (list[str], optional): A list of choices. Defaults to None.

    Returns:
        str: The selected option or freeform input.
    """
    while True:
        print(f"\n{prompt}")
        if options:
            for i, option in enumerate(options, 1):
                print(f"{i}. {option}")
            choice = input("Pick a number: ").strip().upper()
            if choice == 'X':
                print("Exiting.")
                exit()
            elif choice == 'C':
                os.system('clear')
                print_banner()
                continue
            elif choice == 'R':
                raise RestartException()
            elif choice.isdigit() and 1 <= int(choice) <= len(options):
                return options[int(choice) - 1]
            else:
                print("\nInvalid choice.")
        else:
            answer = input("Your answer: ").strip()
            if answer.upper() == 'X':
                print("Exiting.")
                exit()
            elif answer.upper() == 'C':
                os.system('clear')
                print_banner()
                continue
            elif answer.upper() == 'R':
                raise RestartException()
            return answer


def get_food_nutrition(food_name):
    """
    Fetch USDA nutritional information for a given food name using the FDC API.

    Args:
        food_name (str): The name of the food item to search for.

    Returns:
        dict: A dictionary containing the food's description, calories, protein, fat, and fiber.
              If an error occurs or no data is found, returns a dictionary with an "Error" message.
    """
    try:
        search_params = {
            'query': food_name,
            'api_key': FDC_API_KEY,
            'dataType': 'Foundation,SR Legacy',
            'pageSize': 1
        }
        search_resp = requests.get(FDC_SEARCH_URL, params=search_params)
        if search_resp.status_code != 200:
            return {"Error": f"USDA API search error: {search_resp.status_code}"}

        foods = search_resp.json().get('foods', [])
        if not foods:
            return {"Error": f"No results found for '{food_name}'"}

        food_id = foods[0]['fdcId']
        print(f"🔍 Using FDC ID {food_id} from dataType: {foods[0].get('dataType')}")

        detail_url = f"https://api.nal.usda.gov/fdc/v1/food/{food_id}"
        detail_resp = requests.get(detail_url, params={'api_key': FDC_API_KEY})
        if detail_resp.status_code != 200:
            return {"Error": f"USDA API detail error: {detail_resp.status_code}"}

        food = detail_resp.json()
        nutrients = food.get('foodNutrients', [])
        nutrient_values = {}

        for n in nutrients:
            try:
                nid = n['nutrient']['id']
                amt = n.get('amount')
                if nid in [1008, 1003, 1004, 1079] and amt is not None:
                    nutrient_values[nid] = amt
            except Exception:
                continue

        return {
            "Description": food.get('description', 'N/A'),
            "Calories": nutrient_values.get(1008, 'N/A'),
            "Protein": nutrient_values.get(1003, 'N/A'),
            "Fat": nutrient_values.get(1004, 'N/A'),
            "Fiber": nutrient_values.get(1079, 'N/A'),
        }
    except Exception as e:
        return {"Error": str(e)}


def generate_meal_idea(plant_name, nutrients):
    """
    Generate a simple, healthy meal idea using the specified plant as the main ingredient.

    Args:
        plant_name (str): The name of the plant to use in the recipe.
        nutrients (dict): A dictionary of the plant's USDA nutrient information.

    Returns:
        str: A short meal suggestion generated by the Gemini AI model.
             Includes highlighted nutrient benefits. Returns an error message on failure.
    """
    try:
        model = genai.GenerativeModel("gemini-1.5-flash")
        prompt = (
            f"I'm growing {plant_name}. Here are its USDA nutrients: {nutrients}. "
            "Suggest one simple, healthy meal idea that uses this plant as the main ingredient. "
            "Keep the description under 50 words and highlight the nutrient benefit."
        )
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"Error generating meal idea: {str(e)}"


kit_recommendations = {
    "Hydro": {
        "Under $30": "https://www.amazon.com/example-hydro-30",
        "$30–$100": "https://www.amazon.com/example-hydro-100",
        "$100+": "https://www.amazon.com/example-hydro-100plus",
        "Open Budget": "https://www.amazon.com/example-hydro-all"
    },
    "Soil": {
        "Under $30": "https://www.amazon.com/example-soil-30",
        "$30–$100": "https://www.amazon.com/example-soil-100",
        "$100+": "https://www.amazon.com/example-soil-100plus",
        "Open Budget": "https://www.amazon.com/example-soil-all"
    }
}


def get_plant_suggestions(plant_type, preferences=None):
    """
    Use Gemini AI to suggest a list of edible plants based on user-selected type and preferences.

    Args:
        plant_type (str): The general category of plant (e.g., 'Herbs', 'Leafy Greens', etc.).
        preferences (str, optional): A user-defined filter such as flavor, cuisine, or ease of growth.

    Returns:
        list: A list of 5 plant names as strings. Returns an empty list if no valid suggestions are generated.
    """
    max_retries = 3
    for attempt in range(max_retries):
        try:
            model = genai.GenerativeModel("gemini-1.5-flash")
            base_prompt = (
                "Suggest a list of 5 popular {} that are easy to grow at home. "
                "List only the names, separated by commas. Do not include any extra text."
            )

            if plant_type == "Herbs":
                kind = "culinary herbs"
            elif plant_type == "Leafy Greens":
                kind = "leafy greens"
            elif plant_type == "Small Veggies":
                kind = "small vegetables"
            else:
                kind = "edible plants"

            prompt = base_prompt.format(kind)
            if preferences:
                prompt = (
                    f"Suggest a list of 5 {kind} that match these preferences: "
                    f"{preferences}. List only the names, separated by commas. Do not include extra text."
                )

            response = model.generate_content(prompt)
            plants = [p.strip() for p in response.text.split(',') if p.strip()]

            if plants:
                return plants
            else:
                print(f"Attempt {attempt + 1}: No valid plants returned, retrying...")
        except Exception as e:
            print(f"Attempt {attempt + 1}: Error getting plant suggestions: {e}")
            if attempt < max_retries - 1:
                print("Retrying...")
            else:
                print("Failed to get plant suggestions after all attempts.")
                return []
    return []


def plant_questionnaire():
    """
    Conduct an interactive CLI-based questionnaire to collect user preferences
    for growing edible plants and provide personalized recommendations.

    The function:
    - Asks about planting location, lighting, kit ownership, and goals.
    - Offers kit recommendations based on preferences.
    - Uses Gemini to suggest plants to grow.
    - Retrieves USDA nutrition data for each plant.
    - Displays a nutrient comparison chart.
    - Optionally generates AI-powered meal suggestions for each plant.

    Returns:
        None
    """
    print("Let's customize your growing setup.")
    plant_data = {}

    plant_data["Planting Location"] = get_input(
        "Where do you want to plant?",
        ["Indoors", "Outdoors", "Not sure"]
    )

    if plant_data["Planting Location"] == "Indoors":
        plant_data["Natural Sunlight Access"] = get_input(
            "Do you have access to natural sunlight?",
            ["Yes", "No", "Partial", "Not sure"]
        )
    else:
        plant_data["Outdoor Exposure"] = get_input(
            "Is the area exposed to wind or heavy rain?",
            ["Yes", "No", "Partial", "Not sure"]
        )

    plant_data["Sunlight Hours"] = get_input(
        "How many hours of sunlight does the space get daily?",
        ["0–2", "3–5", "6+ hours", "Not sure"]
    )

    plant_data["Existing Kit"] = get_input(
        "Do you already own a hydroponic or soil kit?",
        ["Yes – Hydro", "Yes – Soil", "No", "Not sure"]
    )

    if plant_data["Existing Kit"] == "No":
        plant_data["wants_suggestion"] = get_input(
            "Do you want a kit recommendation?", ["Yes", "No"]
        )
        if plant_data["wants_suggestion"] == "Yes":
            plant_data["Preferred Method"] = get_input(
                "Which setup are you most interested in?",
                ["Hydro", "Soil", "Not sure"]
            )
            plant_data["Budget"] = get_input(
                "What is your budget for setup?",
                ["Under $30", "$30–$100", "$100+", "Open Budget"]
            )

    plant_data["What to Grow"] = get_input(
        "What do you want to grow?",
        ["Herbs", "Leafy Greens", "Small Veggies", "Not sure"]
    )
    plant_data["Plant Count"] = get_input(
        "How many plants would you like to grow at once?",
        ["1–3", "4–6", "7+", "Open to anything"]
    )
    plant_data["Harvest Speed"] = get_input(
        "How soon would you like to harvest something?",
        ["Fastest possible", "I'm patient", "No preference"]
    )
    plant_data["Low Maintenance"] = get_input(
        "Do you prefer low-maintenance plants?",
        ["Yes", "Doesn't matter", "I want a challenge"]
    )
    plant_data["Weekly Care Time"] = get_input(
        "How much time can you dedicate to plant care weekly?",
        ["Less than 30 min", "30–60 min", "More than 1 hour"]
    )
    plant_data["Meal Suggestions"] = get_input(
        "Do you want to receive meal suggestions based on what you grow?",
        ["Yes", "No"]
    )

    print("\n🌱 Here's a summary of your preferences:")
    for key, value in plant_data.items():
        print(f"- {key}: {value}")

    if plant_data.get("wants_suggestion") == "Yes":
        kit_type = plant_data.get("Preferred Method")
        budget = plant_data.get("Budget")
        link = kit_recommendations.get(kit_type, {}).get(budget)
        if link:
            print(f"\n🛠️ Recommended {kit_type.lower()} kit:")
            print(link)
        else:
            print("\nSorry, no kit recommendation available.")

    preference_options = ["Flavor", "Cuisine", "Easy to grow", "No preference/Blank"]
    preference_prompt = (
        f"Do you have any preferences for {plant_data['What to Grow'].lower()}?"
    )
    preference_choice = get_input(
        preference_prompt + "\n(Select an option or choose 'No preference/Blank')",
        preference_options
    )
    preferences = "" if preference_choice == "No preference/Blank" else preference_choice

    plant_list = get_plant_suggestions(plant_data["What to Grow"], preferences)
    grow_type = plant_data["What to Grow"]
    grow_type_display = grow_type if grow_type != "Not sure" else "plants"

    print(f"\n🌿 Gemini suggests these {grow_type_display.lower()} for you: {', '.join(plant_list)}")
    print("\nFetching nutrition info for each plant...")

    chart_data = []
    for plant in plant_list:
        info = get_food_nutrition(plant)
        if "Error" not in info:
            chart_data.append([
                plant,
                info.get("Calories", "N/A"),
                info.get("Protein", "N/A"),
                info.get("Fat", "N/A"),
                info.get("Fiber", "N/A")
            ])

    print(f"\n📊 USDA Nutrition Chart for {grow_type_display} (per 100g):")
    print(f"{'Plant':<15}{'Calories':<10}{'Protein':<10}{'Fat':<10}{'Fiber':<10}")
    print("-" * 55)
    for row in chart_data:
        print(f"{row[0]:<15}{row[1]:<10}{row[2]:<10}{row[3]:<10}{row[4]:<10}")

    if plant_data["Meal Suggestions"] == "Yes":
        print("\n🍽️ Generating meal ideas using Gemini...")
        for plant in plant_list:
            info = get_food_nutrition(plant)
            if "Error" not in info:
                meal = generate_meal_idea(plant, info)
                print(f"\n✨ Meal Suggestion for {plant}:")
                print(meal)


if __name__ == "__main__":
    while True:
        try:
            os.system('clear')
            print_banner()
            plant_questionnaire()
            again = get_input("\nDo you want to start over?", ["Yes", "No"])
            if again != "Yes":
                print("Thanks for using GrowPal. Goodbye.")
                break
        except RestartException:
            continue
